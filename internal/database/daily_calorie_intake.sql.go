// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: daily_calorie_intake.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDailyCalorieIntake = `-- name: CreateDailyCalorieIntake :one
INSERT INTO daily_calorie_intake(id, created_at, updated_at, user_id, calories)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, calories, user_id
`

type CreateDailyCalorieIntakeParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	Calories  int32
}

func (q *Queries) CreateDailyCalorieIntake(ctx context.Context, arg CreateDailyCalorieIntakeParams) (DailyCalorieIntake, error) {
	row := q.db.QueryRowContext(ctx, createDailyCalorieIntake,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.Calories,
	)
	var i DailyCalorieIntake
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Calories,
		&i.UserID,
	)
	return i, err
}

const deleteDailyCalories = `-- name: DeleteDailyCalories :exec
DELETE FROM daily_calorie_intake WHERE user_id = $1
`

func (q *Queries) DeleteDailyCalories(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDailyCalories, userID)
	return err
}

const getDailyCalories = `-- name: GetDailyCalories :many
SELECT id, created_at, updated_at, calories, user_id FROM daily_calorie_intake WHERE user_id = $1
`

func (q *Queries) GetDailyCalories(ctx context.Context, userID uuid.UUID) ([]DailyCalorieIntake, error) {
	rows, err := q.db.QueryContext(ctx, getDailyCalories, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DailyCalorieIntake
	for rows.Next() {
		var i DailyCalorieIntake
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Calories,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
