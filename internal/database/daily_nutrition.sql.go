// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: daily_nutrition.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDailyNutrition = `-- name: CreateDailyNutrition :one
INSERT INTO daily_calorie_intake(id, created_at, updated_at, user_id, calories, carbohydrates, protien, fat, fiber)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, created_at, updated_at, user_id, calories, carbohydrates, protien, fat, fiber
`

type CreateDailyNutritionParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	UserID        uuid.UUID
	Calories      int32
	Carbohydrates int32
	Protien       int32
	Fat           int32
	Fiber         int32
}

func (q *Queries) CreateDailyNutrition(ctx context.Context, arg CreateDailyNutritionParams) (DailyCalorieIntake, error) {
	row := q.db.QueryRowContext(ctx, createDailyNutrition,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.Calories,
		arg.Carbohydrates,
		arg.Protien,
		arg.Fat,
		arg.Fiber,
	)
	var i DailyCalorieIntake
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.Calories,
		&i.Carbohydrates,
		&i.Protien,
		&i.Fat,
		&i.Fiber,
	)
	return i, err
}

const deleteDailyNutritionOfUserByUserId = `-- name: DeleteDailyNutritionOfUserByUserId :exec
DELETE FROM daily_calorie_intake WHERE user_id = $1
`

func (q *Queries) DeleteDailyNutritionOfUserByUserId(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDailyNutritionOfUserByUserId, userID)
	return err
}

const getDailyNutritionOfUserByUserId = `-- name: GetDailyNutritionOfUserByUserId :many
SELECT id, created_at, updated_at, user_id, calories, carbohydrates, protien, fat, fiber FROM daily_calorie_intake WHERE user_id = $1
`

func (q *Queries) GetDailyNutritionOfUserByUserId(ctx context.Context, userID uuid.UUID) ([]DailyCalorieIntake, error) {
	rows, err := q.db.QueryContext(ctx, getDailyNutritionOfUserByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DailyCalorieIntake
	for rows.Next() {
		var i DailyCalorieIntake
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.Calories,
			&i.Carbohydrates,
			&i.Protien,
			&i.Fat,
			&i.Fiber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
