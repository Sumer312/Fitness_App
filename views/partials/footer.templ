package partials

templ Footer() {
	<footer class="footer -mt-2 p-10 bg-base-300 text-accent-content" data-theme="">
		<div>
			<img src="https://img.icons8.com/?size=512&id=X3XGYoBQVt1Q&format=png" width="70" height="50"/>
			<p class="font-extrabold text-[18px]">
				Fitness app
			</p>
		</div>
		<div>
			<span class="footer-title">FrontEnd</span>
			<a class="link link-hover flex">
				Htmx
			</a>
			<a class="link link-hover flex">
				Go Templ
			</a>
			<a class="link link-hover flex">
				Tailwind
			</a>
			<a class="link link-hover flex">
				Daisy UI
			</a>
		</div>
		<div>
			<span class="footer-title">BackEnd</span>
			<a class="link link-hover flex">
				GoLang
			</a>
			<a class="link link-hover flex">
				Chi-Router
			</a>
			<a class="link link-hover flex">
				JWT
			</a>
			<a class="link link-hover flex">
				SQL
			</a>
		</div>
		<div>
			<span class="footer-title">Tools</span>
			<a class="link link-hover flex">
				Docker
			</a>
			<a class="link link-hover flex">
				sqlc
			</a>
			<a class="link link-hover flex">
				goose
			</a>
			<a class="link link-hover flex">
				neovim
			</a>
		</div>
	</footer>
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
	<script>
  document.body.addEventListener("warnToast", function (event) {
    Warning(event.detail.value)
  })

  document.body.addEventListener("errorToast", function (event) {
    Error(event.detail.value)
  })

  document.body.addEventListener("successToast", function (event) {
    Success(event.detail.value)
  })

  document.body.addEventListener("infoToast", function (event) {
    Info(event.detail.value)
  })

  document.getElementById("calories_calc_form").addEventListener("htmx:afterSwap", function (event) {
    let response = JSON.parse(event.detail.target.innerText)
    event.detail.target.innerHTML = `
    <iframe name="dummyframe" id="dummyframe" style="display: none;"></iframe>
    <form target="dummyframe" id="kcalForm" action="/server/daily-input" method="post">
      <p>Calories:</p> <p class="text-accent">${response.calories}</p>
      <input name="calories" type="hidden" value=${response.calories} />
    <br>
      <p>CarboHydrates:</p> <p class="text-accent">${response.totalNutrients.CHOCDF.quantity} ${response.totalNutrients.CHOCDF.unit}</p>
      <input name="carbohydrates" type="hidden" value=${response.totalNutrients.CHOCDF.quantity} />
    <br>
      <p>protein:</p> <p class="text-accent">${response.totalNutrients.PROCNT.quantity} ${response.totalNutrients.PROCNT.unit}</p>
      <input name="protein" type="hidden" value=${response.totalNutrients.PROCNT.quantity} />
    <br>
      <p>Fats:</p> <p class="text-accent">${response.totalNutrients.FAT.quantity} ${response.totalNutrients.FAT.unit}</p>
      <input name="fat" type="hidden" value=${response.totalNutrients.FAT.quantity} />
    <br>
      <p>Fiber:</p> <p class="text-accent">${response.totalNutrients.FIBTG.quantity} ${response.totalNutrients.FIBTG.unit}</p>
      <input name="fiber" type="hidden" value=${response.totalNutrients.FIBTG.quantity} />
    <br>
      <p>Sugar:</p> <p class="text-accent">${response.totalNutrients.SUGAR.quantity} ${response.totalNutrients.SUGAR.unit}</p>
    <br>
      <p>Saturated Fats:</p> <p class="text-accent">${response.totalNutrients.FASAT.quantity} ${response.totalNutrients.FASAT.unit}</p>
    <br>
      <button class="btn btn-lg btn-primary btn-outline" type="button" onclick="submit_form('kcalForm')">Enter into logs</button>
    </form>
    `
  })

  function submit_form(id) {
    const form = document.forms[id];
    const formData = new URLSearchParams(new FormData(form));
    fetch(form.action, {
      method: 'post',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: formData
    })
      .then(response => {
        if (response.status === 200) {
          Success("Entered in logs")
        } else {
          Error("Couldn't enter in logs")
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
  }

  function DrawerClose() {
    document.getElementById("my-drawer").checked = false
  }

  function SetTheme() {
    const elements = document.querySelectorAll("[data-theme]")
    elements.forEach(element => {
      let theme = window.localStorage.getItem("theme")
      if (theme === null) {
        theme = "retro"
      }
      element.setAttribute("data-theme", theme)
    })
  }

  function ChangeTheme() {
    if (window.localStorage.getItem("theme") == "retro") {
      current_theme = "coffee"
    } else {
      current_theme = "retro"
    }
    window.localStorage.setItem("theme", current_theme)
    const elements = document.querySelectorAll("[data-theme]")
    elements.forEach(element => {
      const theme = window.localStorage.getItem("theme") || "luxury"
      element.setAttribute("data-theme", theme)
    })
  }

  function Warning(message) {
    Toastify({
      text: message,
      duration: 1500,
      close: false,
      gravity: "bottom", // `top` or `bottom`
      position: "center", // `left`, `center` or `right`
      stopOnFocus: true, // Prevents dismissing of toast on hover
      style: {
        background: "oklch(var(--wa))",
      },
    }).showToast();
  }

  function Success(message) {
    Toastify({
      text: message,
      duration: 1500,
      close: false,
      gravity: "bottom", // `top` or `bottom`
      position: "center", // `left`, `center` or `right`
      stopOnFocus: true, // Prevents dismissing of toast on hover
      style: {
        background: "oklch(var(--su))",
      },
    }).showToast();
  }

  function Error(message) {
    Toastify({
      text: message,
      duration: 1500,
      close: false,
      gravity: "bottom", // `top` or `bottom`
      position: "center", // `left`, `center` or `right`
      stopOnFocus: true, // Prevents dismissing of toast on hover
      style: {
        background: "oklch(var(--er))",
      },
    }).showToast();
  }

  function Info(message) {
    Toastify({
      text: message,
      duration: 1500,
      close: false,
      gravity: "bottom", // `top` or `bottom`
      position: "center", // `left`, `center` or `right`
      stopOnFocus: false, // Prevents dismissing of toast on hover
      style: {
        background: "oklch(var(--in))",
      },
    }).showToast();
  }

</script>
}
