package partials

templ Footer() {
	<footer class="footer -mt-2 p-10 bg-base-300 text-accent-content">
		<div>
			<img src="/static/img.icons8.png" width="70" height="50"/>
			<p class="font-extrabold text-[18px]">
				GoFit
			</p>
		</div>
		<div class="gap-2">
			<span class="footer-title">FrontEnd</span>
			<p class="grid">
				@HtmxIcon()
				Htmx
			</p>
			<p class="grid">
				@HtmxIcon()
				Go Templ
			</p>
			<p class="grid">
				@TailwindIcon()
				Tailwind
			</p>
			<p class="grid">
				@DaisyUiIcon()
				Daisy UI
			</p>
		</div>
		<div>
			<span class="footer-title">BackEnd</span>
			<p class="grid">
				@GoLangIcon()
				GoLang
			</p>
			<p class="grid">
				@GoLangIcon()
				Chi-Router
			</p>
			<p class="grid">
				@JwtIcon()
				JWT
			</p>
			<p class="grid">
				@SqlIcon()
				SQL
			</p>
		</div>
		<div>
			<span class="footer-title">Tools</span>
			<p class="grid">
				@DockerIcon()
				Docker
			</p>
			<p class="grid">
				@SqlIcon()
				Sqlc
			</p>
			<p class="grid">
				@GoLangIcon()
				Goose
			</p>
			<p class="grid">
				@NeovimIcon()
				Neovim
			</p>
		</div>
	</footer>
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
	<script>
  document.body.addEventListener("warnToast", function (event) {
    Warning(event.detail.value)
  })

  document.body.addEventListener("errorToast", function (event) {
    Error(event.detail.value)
  })

  document.body.addEventListener("successToast", function (event) {
    Success(event.detail.value)
  })

  document.body.addEventListener("infoToast", function (event) {
    Info(event.detail.value)
  })

  document.getElementById("calories_calc_form").addEventListener("htmx:afterSwap", function (event) {
    let response = JSON.parse(event.detail.target.innerText)
    event.detail.target.innerHTML = `
      <iframe name="dummyframe" id="dummyframe" style="display: none;"></iframe>
      <form target="dummyframe" id="kcalForm" action="/server/daily-input" method="post">
      <p>Calories:</p> <p class="text-primary">${response.calories}</p>
      <input name="calories" type="hidden" value=${response.calories} />
      <br>
      <p>Carbohydrates:</p> <p class="text-primary">${response.totalNutrients.CHOCDF.quantity} ${response.totalNutrients.CHOCDF.unit}</p>
      <input name="carbohydrates" type="hidden" value=${response.totalNutrients.CHOCDF.quantity} />
      <br>
      <p>Protein:</p> <p class="text-primary">${response.totalNutrients.PROCNT.quantity} ${response.totalNutrients.PROCNT.unit}</p>
      <input name="protein" type="hidden" value=${response.totalNutrients.PROCNT.quantity} />
      <br>
      <p>Fats:</p> <p class="text-primary">${response.totalNutrients.FAT.quantity} ${response.totalNutrients.FAT.unit}</p>
      <input name="fat" type="hidden" value=${response.totalNutrients.FAT.quantity} />
      <br>
      <p>Fiber:</p> <p class="text-primary">${response.totalNutrients.FIBTG.quantity} ${response.totalNutrients.FIBTG.unit}</p>
      <input name="fiber" type="hidden" value=${response.totalNutrients.FIBTG.quantity} />
      <br>
      <p>Sugar:</p> <p class="text-primary">${response.totalNutrients.SUGAR.quantity} ${response.totalNutrients.SUGAR.unit}</p>
      <br>
      <p>Saturated Fats:</p> <p class="text-primary">${response.totalNutrients.FASAT.quantity} ${response.totalNutrients.FASAT.unit}</p>
      <br>
      <button class="btn btn-lg btn-primary" type="button" onclick="submit_form('kcalForm')">Enter into logs</button>
      </form>
      `
  })

  function submit_form(id) {
    const form = document.forms[id];
    const formData = new URLSearchParams(new FormData(form));
    fetch(form.action, {
      method: 'post',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: formData
    })
      .then(response => {
        if (response.status === 200) {
          Success("Entered in logs")
        } else {
          Error("Couldn't enter in logs")
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
  }

  function DrawerClose() {
    document.getElementById("my-drawer").checked = false
  }

  function Warning(message) {
    Toastify({
      text: message,
      duration: 1500,
      close: false,
      gravity: "bottom", // `top` or `bottom`
      position: "center", // `left`, `center` or `right`
      stopOnFocus: true, // Prevents dismissing of toast on hover
      style: {
        background: "oklch(var(--wa))",
        color: "oklch(var(--n))",
      },
    }).showToast();
  }

  function Success(message) {
    Toastify({
      text: message,
      duration: 1500,
      close: false,
      gravity: "bottom", // `top` or `bottom`
      position: "center", // `left`, `center` or `right`
      stopOnFocus: true, // Prevents dismissing of toast on hover
      style: {
        background: "oklch(var(--su))",
        color: "oklch(var(--n))",
      },
    }).showToast();
  }

  function Error(message) {
    Toastify({
      text: message,
      duration: 1500,
      close: false,
      gravity: "bottom", // `top` or `bottom`
      position: "center", // `left`, `center` or `right`
      stopOnFocus: true, // Prevents dismissing of toast on hover
      style: {
        background: "oklch(var(--er))",
        color: "oklch(var(--n))",
      },
    }).showToast();
  }

  function Info(message) {
    Toastify({
      text: message,
      duration: 1500,
      close: false,
      gravity: "bottom", // `top` or `bottom`
      position: "center", // `left`, `center` or `right`
      stopOnFocus: false, // Prevents dismissing of toast on hover
      style: {
        background: "oklch(var(--in))",
        color: "oklch(var(--n))",
      },
    }).showToast();
  }

</script>
}
